agent:
  name: m1_deep_geometry
  class: agent.sac.SACAgent
  params:
    obs_dim: 896 # to be specified later
    action_dim: ??? # to be specified later
    action_range: ??? # to be specified later
    device: ${device}
    critic_cfg: ${double_q_critic}
    actor_cfg: ${diag_gaussian_actor}
    discount: 0.99
    init_temperature: 0.1
    alpha_lr: 1e-4
    alpha_betas: [0.9, 0.999]
    actor_lr: ${actor_lr}
    actor_betas: [0.9, 0.999]
    actor_update_frequency: 1
    critic_lr: ${critic_lr}
    critic_betas: [0.9, 0.999]
    critic_tau: 0.005
    critic_target_update_frequency: 2
    batch_size: 512
    learnable_temperature: true
    need_encoder: true
    encoder_cfg: ${encoder}

double_q_critic:
  class: agent.critic.DoubleQCriticWithEncoder
  params:
    obs_dim: ${encoder.params.output_dim}
    action_dim: ${agent.params.action_dim}
    hidden_dim: 256
    hidden_depth: 2
    has_proprio_input: True
    proprio_dim: 4  #
    proprio_expanded_dim: 64

diag_gaussian_actor:
  class: agent.actor.DiagGaussianActorWithEncoder
  params:
    obs_dim: ${agent.params.obs_dim}
    action_dim: ${agent.params.action_dim}
    hidden_depth: 2
    hidden_dim: 256
    log_std_bounds: [-5, 2]
    has_proprio_input: True
    proprio_dim: 4  #
    proprio_expanded_dim: 64

encoder:
  name: ${agent.name}
  params:
    image_input_channel_num: 3
    conv_layer_params: { 'filter num': [ 16, 16, 32, 32 ], 'kernel sizes': [ 7, 3, 3, 3 ], 'strides': [ 1, 1, 2, 1 ] }
    gnn_params: { 'layer_nums': [ 3, 4, 4], 'msg_dim': 128, 'h_dim': 128, 'output_dim': 128, 'share_basis_graphs': True }
    key_point_num: 20
    key_pointer_gauss_std: 0.1
    key_pointer_flatten: 'conv2d'
    debug_save_dir: '../../raw'
    debug_frequency: 1000
    output_dim: 896
